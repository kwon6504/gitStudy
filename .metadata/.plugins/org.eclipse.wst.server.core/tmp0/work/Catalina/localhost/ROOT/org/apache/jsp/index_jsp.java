/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2024-02-14 06:51:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.MangoChat.FriendDB.F_Dao;
import com.MangoChat.FriendDB.F_Dto;
import com.MangoChat.LoginDB.L_Dto;
import com.MangoChat.RoomDB.R_Dto;
import java.util.ArrayList;
import com.MangoChat.util.Util;
import com.MangoChat.RoomDB.R_Dao;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.MangoChat.RoomDB.R_Dao");
    _jspx_imports_classes.add("com.MangoChat.FriendDB.F_Dto");
    _jspx_imports_classes.add("com.MangoChat.util.Util");
    _jspx_imports_classes.add("com.MangoChat.LoginDB.L_Dto");
    _jspx_imports_classes.add("com.MangoChat.FriendDB.F_Dao");
    _jspx_imports_classes.add("com.MangoChat.RoomDB.R_Dto");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>채팅 로비 메인</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/index.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/chatRoom.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

	String myUserName = (String) session.getAttribute("userName");
	String myUserNo = (String) session.getAttribute("userNo");
	String userTag = (String) session.getAttribute("userTag");
	String roomNo = request.getParameter("roomNo");
	String cookieName = "myCookie";
	Cookie cookie = new Cookie(cookieName, myUserNo);
	cookie.setMaxAge(3);
	response.addCookie(cookie);
	
      out.write("\r\n");
      out.write("	<div id=\"main\">\r\n");
      out.write("		<header id=\"top\"></header>\r\n");
      out.write("		<section id=\"mid\">\r\n");
      out.write("			<div id=\"midLeft\">\r\n");
      out.write("				<div id=\"chatTop\">\r\n");
      out.write("					<div id=\"topText\">채팅목록 ▼</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				");

				R_Dao dao = new R_Dao();
				Util util = new Util();
				ArrayList<R_Dto> roomList = dao.roomList(myUserNo);
				if (roomList.size() > 0) {
					for (R_Dto list : roomList) {
						L_Dto name = util.userName(list.bossNo);
						int count = util.roomUserCount(list.roomNo);
				
      out.write("\r\n");
      out.write("				<div id=\"roomNo\" onclick=\"chat('");
      out.print(list.roomNo);
      out.write("')\">\r\n");
      out.write("					방이름:");
      out.print(list.roomName);
      out.write("<br> 방장 :");
      out.print(name.userName);
      out.write('#');
      out.print(name.userTag);
      out.write("\r\n");
      out.write("					방인원:");
      out.print(count);
      out.write('/');
      out.print(list.userMax);
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("				<script>\r\n");
      out.write("					function chat(roomNo) {\r\n");
      out.write("						window.location.href = \"/chat/index?roomNo=\" + roomNo;\r\n");
      out.write("					}\r\n");
      out.write("				</script>\r\n");
      out.write("				");

				}
				} else {
				
      out.write("채팅방이 없는 아싸입니다");

				}
				
      out.write("\r\n");
      out.write("\r\n");
      out.write("				<div id=\"chatRoom\"></div>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<div id=\"midCenter\">\r\n");
      out.write("\r\n");
      out.write("				<div id=\"midChat\">\r\n");
      out.write("					");

					if (roomNo != null && !roomNo.equals(null)) {
					
      out.write("\r\n");
      out.write("					");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "chatting.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("roomNo", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(roomNo), request.getCharacterEncoding()), out, true);
      out.write("\r\n");
      out.write("					");

					} else {
					
      out.write("\r\n");
      out.write("					채팅방 접속하지않음\r\n");
      out.write("					");

					}
					
      out.write("\r\n");
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div id=\"midRight\">\r\n");
      out.write("				<div id=\"midProfile\">\r\n");
      out.write("					<img id=\"ProfileImage\"\r\n");
      out.write("						src=\"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png\">\r\n");
      out.write("					<div id=\"ProfileText\">");
      out.print(myUserName);
      out.write("님 반갑습니다.\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div id=\"midFriend\">\r\n");
      out.write("					<div id=\"friendtop\">\r\n");
      out.write("						<div id=\"friendText\">친구목록▼ 친구찾기▼ \r\n");
      out.write("						<a href=\"/friendAdd.jsp\">알림▼</a>\r\n");
      out.write("						</div>\r\n");
      out.write("						<!-- 이거 토글기능 넣고싶음 친구목록,친구찾기,신청받은리스트 등등-->\r\n");
      out.write("					</div>\r\n");
      out.write("\r\n");
      out.write("					");
 
					// 친구목록 표기 로그인시 자동으로 나오게 만들었음.
					F_Dao f_dao = new F_Dao();
					ArrayList<F_Dto> friendlist = f_dao.friendList(myUserNo); 
					
      out.write("\r\n");
      out.write("					<hr>\r\n");
      out.write("					");
      out.print( "현재친구:"+friendlist.size()+"명" );
      out.write("\r\n");
      out.write("					");
 
					// 어레이리스트 (친구리스트) 를 불러와서 사이즈 만큼 for문 ++문 만들어서 자동출력
					for(int i=0;i<friendlist.size();i=i+1){
					F_Dto friendInfo = f_dao.friendInfo(friendlist.get(i).Frined_NAME);
					
					// 출력부분 및 삭제부분
					// post 방식으로 전송후 서블릿 컨트롤러 타서 처리하게 만들었음.
					
      out.write("\r\n");
      out.write("					<hr>\r\n");
      out.write("						");
      out.print(friendInfo.Frined_NAME );
      out.write('#');
      out.print(friendInfo.Tag );
      out.write("\r\n");
      out.write("						<form action=\"/chat/friendDel\" method=\"post\">\r\n");
      out.write("						<!-- form 으로 묶은다음 매서드를 post로 한 뒤 submit 버튼 출력 후 값을 히든처리해서 전송 -->\r\n");
      out.write("						<input type=\"hidden\" name=\"friendName\" value=\"");
      out.print( friendInfo.Frined_NAME );
      out.write("\">\r\n");
      out.write("       					<input type=\"hidden\" name=\"friendTag\" value=\"");
      out.print( friendInfo.Tag );
      out.write("\">\r\n");
      out.write("						<input type=\"submit\" name=\"friendNo\" value=\"삭제\">\r\n");
      out.write("						</form>\r\n");
      out.write("					");

					}
					// 친구검색기능창 get 방식으로 서블릿 컨트톨러 타서 세션 처리 및 예외 조건 처리해둠					
					
      out.write("\r\n");
      out.write("					<hr>\r\n");
      out.write("					<form action=\"/chat/friendListSearch\">\r\n");
      out.write("					<input type=\"text\" name = \"searchName\" placeholder=\"닉네임\"># \r\n");
      out.write("					<input type=\"text\" name = \"searchTag\" placeholder=\"테그\">\r\n");
      out.write("					<input type=\"submit\" value=\"검색\">\r\n");
      out.write("					</form>\r\n");
      out.write("					\r\n");
      out.write("					");
 
					// 이거 경고 무시해도됌 by.재원
					// 친구 검색 및 추가기능
					// 어레이리스트 세션처리
					ArrayList<L_Dto> search =(ArrayList<L_Dto>)session.getAttribute("listSearch");
					ArrayList<L_Dto> searchTag =(ArrayList<L_Dto>)session.getAttribute("taglistSearch");
					// 조건1 예외문 처음 시작할때 무조건 null값 가져와서 조건 넣어야지 발동되게 만들었음.
					// 서치만 처리(검색)
					if(searchTag == null && search != null){
						for(int i=0; i < search.size();i++){
							L_Dto searchRun = search.get(i);
							
					// 출력부분 및 친구추가기능
					// post방식으로 서블릿으로 전송 후 처리
					
      out.write("\r\n");
      out.write("						<hr>\r\n");
      out.write("						");
      out.print(searchRun.userName);
      out.write('#');
      out.print(searchRun.userTag);
      out.write("\r\n");
      out.write("						<form action=\"/chat/requestFriend\" method=\"post\">\r\n");
      out.write("						<!-- form 으로 묶은다음 매서드를 post로 한 뒤 submit 버튼 출력 후 값을 히든처리해서 전송 -->\r\n");
      out.write("						<input type=\"hidden\" name=\"friendName\" value=\"");
      out.print(searchRun.userName);
      out.write("\">\r\n");
      out.write("       					<input type=\"hidden\" name=\"friendTag\" value=\"");
      out.print(searchRun.userTag);
      out.write("\">\r\n");
      out.write("						<input type=\"submit\" name=\"friendadd\" value=\"친구신청\">\r\n");
      out.write("						</form>\r\n");
      out.write("					");

					}
					// 조건문2 태그만 처리
					}else if(searchTag != null){
						for(int i=0; i < searchTag.size();i++){
						L_Dto searchTagRun = searchTag.get(i);
						
					// 출력부분 및 친구추가기능
					// post방식으로 서블릿으로 전송 후 처리
					
      out.write("\r\n");
      out.write("						<hr>\r\n");
      out.write("						");
      out.print(searchTagRun.userName);
      out.write('#');
      out.print(searchTagRun.userTag);
      out.write("\r\n");
      out.write("						<form action=\"/chat/requestFriend\" method=\"post\">\r\n");
      out.write("						<!-- form 으로 묶은다음 매서드를 post로 한 뒤 submit 버튼 출력 후 값을 히든처리해서 전송 -->\r\n");
      out.write("						<input type=\"hidden\" name=\"friendName\" value=\"");
      out.print(searchTagRun.userName);
      out.write("\">\r\n");
      out.write("       					<input type=\"hidden\" name=\"friendTag\" value=\"");
      out.print(searchTagRun.userTag);
      out.write("\">\r\n");
      out.write("						<input type=\"submit\" name=\"friendadd\" value=\"친구신청\">\r\n");
      out.write("						</form>\r\n");
      out.write("					");
		
						}
					}
					session.removeAttribute("listSearch");
					session.removeAttribute("taglistSearch");
					
      out.write("\r\n");
      out.write("					\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</section>\r\n");
      out.write("		<footer id=\"bot\">\r\n");
      out.write("			<form action=\"/CreateRoom.jsp\" method=\"get\">\r\n");
      out.write("				<input name=\"roomName\" placeholder=\"방 이름\"> <input\r\n");
      out.write("					type=\"number\" min=\"2\" max=\"30\" name=\"userMax\" placeholder=\"최대방인원수\">\r\n");
      out.write("				<input type=\"submit\">\r\n");
      out.write("			</form>\r\n");
      out.write("		</footer>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
